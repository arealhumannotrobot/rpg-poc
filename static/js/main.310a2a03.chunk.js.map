{"version":3,"sources":["comp/KeyInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KeyInput","props","className","htmlFor","id","label","rows","name","value","onChange","s","console","log","App","useState","pubVal","setPubVal","pvtVal","setPvtVal","alias","setAlias","email","setEmail","passphrase","setPassphrase","passconfirm","setPassconfirm","keyThumb","setKeyThumb","showQRScan","setShowQRScan","qrCode","setQrCode","href","type","v","target","onClick","errFlag","listOfErr","push","key","style","color","pgp","generateKey","then","k","publicKeyArmored","privateKeyArmored","finger","getFingerprint","catch","e","onScan","data","onError","err","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.310a2a03.chunk.js","sourcesContent":["import React from 'react';\n\ntype KeyInputProp = {\n  name:string,\n  id:string,\n  label:string,\n  value?:string,\n}\n\nconst KeyInput: React.FC<KeyInputProp> = (props) => {\n  return (\n    <div className=\"KeyInput\">\n      <label htmlFor={props.id}>{props.label}</label>\n      <textarea rows={10} name={props.name} id={props.id} value={props.value} onChange={(s)=>{console.log(s)}}/>\n    </div>\n  );\n}\n\nexport default KeyInput;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport pgp from 'openpgp';\nimport QrReader from 'react-qr-reader';\n//=====================================//\n\nimport KeyInput from './comp/KeyInput';\n\nlet refPub, refPvt, refMsg\n\nconst App: React.FC = () => {\n  const [pubVal, setPubVal] = useState(\"\");\n  const [pvtVal, setPvtVal] = useState(\"\");\n  const [msgVal, setMsgVal] = useState(\"\");\n\n  const [alias, setAlias] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [passphrase, setPassphrase] = useState(\"\");\n  const [passconfirm, setPassconfirm] = useState(\"\");\n\n\n  const [keyThumb, setKeyThumb] = useState(<div></div>);\n\n  // const [showQRScan, setShowQRScan] = useState(true);\n  const [showQRScan, setShowQRScan] = useState(false);\n  const [qrCode, setQrCode] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n      </header> */}\n      <p>\n        Code for Proof of Concept: <a href=\"https://github.com/arealhumannotrobot/rpg-poc\">https://github.com/arealhumannotrobot/rpg-poc</a>\n      </p>\n      <KeyInput\n        label={\"public key\"}\n        name={\"public_key\"}\n        id={\"public_key\"}\n        value={pubVal}\n      />\n      <KeyInput\n        label={\"private key\"}\n        name={\"private_key\"}\n        id={\"private_key\"}\n        value={pvtVal}\n      />\n      <div>\n        <label htmlFor=\"alias\">Alias</label>\n        <input type=\"text\" name=\"alias\" id=\"alias\" onChange={(v)=>{setAlias(v.target.value)}}/>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"text\" name=\"email\" id=\"email\" onChange={(v)=>{setEmail(v.target.value)}}/>\n        <label htmlFor=\"passphrase\">Passphrase</label>\n        <input type=\"password\" name=\"passphrase\" id=\"passphrase\" onChange={(v)=>{setPassphrase(v.target.value)}}/>\n        <label htmlFor=\"passconfirm\">Confirm Passphrase</label>\n        <input type=\"password\" name=\"passconfirm\" id=\"passconfirm\" onChange={(v)=>{setPassconfirm(v.target.value)}}/>\n      </div>\n      <div>\n        <input type=\"button\" value=\"Generate\" onClick={()=>{\n          let errFlag=false;\n          let listOfErr:JSX.Element[]=[];\n          if (!alias) {\n            listOfErr.push(<p key={`err-alias`} style={{color:\"red\"}}>{`Missing Alias for key pair`}</p>)\n            errFlag=true;\n          }\n          if (!email) {\n            listOfErr.push(<p key={`err-email`} style={{color:\"red\"}}>{`Missing Email for key pair`}</p>)\n            errFlag=true;\n          }\n          if (!passphrase) {\n            listOfErr.push(<p key={`err-passphrase`} style={{color:\"red\"}}>{`Missing passphrase for key pair`}</p>)\n            errFlag=true;\n          }\n          if (passphrase!==passconfirm) {\n            listOfErr.push(<p key={`err-passconfirm`} style={{color:\"red\"}}>{`Confirm passphrase mismatch`}</p>)\n            errFlag=true;\n          }\n          if (!errFlag) {\n            setKeyThumb(<div>{`Generating pgp keypairs...`}</div>);\n            pgp.generateKey({\"curve\":\"curve25519\", \"userIds\":[{\"name\":alias, \"email\":email}], \"passphrase\":passphrase})\n              .then(k => {\n                setPubVal(k.publicKeyArmored);\n                setPvtVal(k.privateKeyArmored);\n  \n                let finger = k.key.getFingerprint();\n                console.log(`fingerprint: ${finger}`);\n                setKeyThumb(<div>{`fingerprint: ${finger}`}</div>);\n              })\n              .catch(e=>console.log(e))\n          }\n          else {\n            setKeyThumb(\n              <div>\n                {listOfErr}\n              </div>\n            )\n          }\n        }}/>\n      </div>\n      <div>{keyThumb}</div>\n\n      <div>\n        <KeyInput \n          name={`msg`}\n          id={`msg`}\n          label={`Message`}\n        />\n      </div>\n\n      <input type=\"button\" value=\"Toggle QR camera\"\n        onClick={()=>{\n          setShowQRScan(!showQRScan);\n        }}\n      />\n\n      {\n        showQRScan?\n        <div>\n          <div>{qrCode}</div>\n          <QrReader \n            onScan={(data)=>{console.log(data); if (data) setQrCode(data); }}\n            onError={(err)=>console.log(err)}\n            style={{width:400, height:400}}\n          />\n        </div>\n        :\n        null\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}