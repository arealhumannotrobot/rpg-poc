{"version":3,"sources":["redux/initState.tsx","redux/reduce_tab.tsx","comp/CompCopyBtn.tsx","comp/CompKeyInput.tsx","tab/TabMyKeys.tsx","tab/TabNewKey.tsx","model/TypeDefination.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.tsx","redux/store.tsx","index.tsx"],"names":["INIT_STATE","tab","ACT_TYPE_TAB_SET_TAB","ACT_TYPE_TAB_STUB","CompCopyBtn","props","OverlayTrigger","key","placement","trigger","overlay","Tooltip","id","customMsg","delay","show","hide","customButton","Button","type","className","style","backgroundColor","borderColor","onClick","text","document","queryCommandSupported","copyTextArea","createElement","value","body","appendChild","select","execCommand","err","console","log","removeChild","window","prompt","copyToClipboard","xmlns","xmlnsXlink","version","width","height","viewBox","d","CompKeyInput","Form","Group","controlId","copyBtn","Label","label","Control","readOnly","disabled","name","as","rows","TabMyKeys","useState","pubVal","setPubVal","pvtVal","setPvtVal","alias","setAlias","email","setEmail","passphrase","setPassphrase","passconfirm","setPassconfirm","keyThumb","setKeyThumb","showQRScan","setShowQRScan","qrCode","setQrCode","Jumbotron","htmlFor","onChange","v","target","errFlag","listOfErr","push","color","pgp","generateKey","then","k","publicKeyArmored","privateKeyArmored","finger","getFingerprint","catch","e","onScan","data","onError","TabNewKey","keyThumbDiv","setKeyThumbDiv","generatePGP","a","pgpGenKey","toString","savePGP","localforage","myRpgKeys","privateKey","publicKey","resultRpgKeys","Container","onSubmit","preventDefault","Row","Col","lg","sm","xs","placeholder","required","isInvalid","undefined","isValid","VERSION","mapDispatchToProps","actcreate_tab_setTab","connect","state","reduxState","Navbar","fixed","variant","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","activeKey","onSelect","Item","NavLink","eventKey","href","rel","fill","Tab","childprops","aria-describedby","accept","files","reader","FileReader","addEventListener","result","length","readAsText","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5222f24c.chunk.js","sourcesContent":["export type INIT_STATE_TYPE = {\n    [x:string]:any,\n    tab: \"MY_KEYS\"| \"NEW_KEYS\" | \"KEY_SIGNING\" | \"EXCH_KEY_RING\" | \"VERF_STRANGER\" | \"MSG_CRYPT\",\n}\n\nexport const INIT_STATE:INIT_STATE_TYPE = {\n    tab: \"MY_KEYS\",\n\n}","import { INIT_STATE, INIT_STATE_TYPE } from \"./initState\"\n\n//-----------------------------------\nexport const ACT_TYPE_TAB_SET_TAB = 'ACT_TYPE_TAB_SET_TAB';\ntype actIntent_tab_SetTab = {\n    type: typeof ACT_TYPE_TAB_SET_TAB\n    tab: INIT_STATE_TYPE[\"tab\"]\n}\nexport const actcreate_tab_setTab = (tab:INIT_STATE_TYPE[\"tab\"]):actIntent_tab_SetTab=>{\n    return { type: ACT_TYPE_TAB_SET_TAB, tab };\n}\n\n//-----------------------------------\nexport const ACT_TYPE_TAB_STUB = 'ACT_TYPE_TAB_STUB';\ntype actIntent_tab_Stub = {\n    type: typeof ACT_TYPE_TAB_STUB\n    stub: string\n}\nexport const actcreate_tab_stub = (stub:string):actIntent_tab_Stub=>{\n    return { type: ACT_TYPE_TAB_STUB, stub };\n}\n//===================================\n\n\ntype actIntent_tab = actIntent_tab_SetTab|actIntent_tab_Stub;\nexport function reduce_tab(state=INIT_STATE[\"tab\"], action:actIntent_tab){\n    switch (action.type) {\n        case ACT_TYPE_TAB_SET_TAB:\n            return action.tab;\n        case ACT_TYPE_TAB_STUB:\n            console.log(\"ACT_TYPE_TAB_STUB\");\n            return state;\n        default:\n            return state;\n    }\n}","import React from 'react';\n//============= react bootstrap ============//\nimport Form from 'react-bootstrap/Form';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\n\ntype CopyBtnProp = {\n  text?:string,\n  customMsg?:string,\n  customButton?: typeof Button,\n}\nconst CompCopyBtn: React.FC<CopyBtnProp> = (props) => {\n  const copyToClipboard = (text?:string) => {\n    if (!text) return;\n    let copyTest = document.queryCommandSupported('copy');\n  \n    if (copyTest === true) {\n      let copyTextArea = document.createElement(\"textarea\");\n      // copyTextArea.hidden = true;\n      copyTextArea.value = text;\n      document.body.appendChild(copyTextArea);\n      copyTextArea.select();\n      try {\n        let successful = document.execCommand('copy');\n        let msg = successful ? 'Copied!' : 'Whoops, not copied!';\n      } catch (err) {\n        console.log('Oops, unable to copy');\n      }\n      document.body.removeChild(copyTextArea);\n    } else {\n      // Fallback if browser doesn't support .execCommand('copy')\n      window.prompt(\"Copy to clipboard: Ctrl+C or Command+C, Enter\", text);\n    }\n  }\n\n  //=======================================================//\n  return (\n    <OverlayTrigger\n      key={'trigger-tooltip-alias'}\n      placement={'bottom'}\n      trigger={'focus'}\n      overlay={\n        <Tooltip id={`newkey-tooltip-alias`}>\n          {props.customMsg?props.customMsg:`copied!`}\n        </Tooltip>\n      }\n      delay={{ show: 200, hide: 2000 }}\n    >\n      {\n        props.customButton?\n        <props.customButton/>\n        :\n        <Button \n          type=\"button\"\n          className=\"btn btn-default btn-copy js-tooltip js-copy\" \n          style={{backgroundColor:\"white\", borderColor:\"black\"}}\n          onClick={()=>{copyToClipboard(props.text)}}\n        >\n            <svg className=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M17,9H7V7H17M17,13H7V11H17M14,17H7V15H14M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3M19,3H14.82C14.4,1.84 13.3,1 12,1C10.7,1 9.6,1.84 9.18,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z\" /></svg> \n        </Button>\n      }\n    </OverlayTrigger>\n  );\n}\n\nexport default CompCopyBtn;","import React from 'react';\n//============= react bootstrap ============//\nimport Form from 'react-bootstrap/Form';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport CompCopyBtn from './CompCopyBtn';\n\ntype KeyInputProp = {\n  name:string,\n  id:string,\n  label:string,\n  value?:string,\n  disabled?:boolean,\n  readOnly?:boolean,\n  copyBtn?:boolean,\n}\nconst CompKeyInput: React.FC<KeyInputProp> = (props) => {\n  const copyToClipboard = (text:string|undefined) => {\n    if (!text) return;\n    let copyTest = document.queryCommandSupported('copy');\n  \n    if (copyTest === true) {\n      let copyTextArea = document.createElement(\"textarea\");\n      // copyTextArea.hidden = true;\n      copyTextArea.value = text;\n      document.body.appendChild(copyTextArea);\n      copyTextArea.select();\n      try {\n        let successful = document.execCommand('copy');\n        let msg = successful ? 'Copied!' : 'Whoops, not copied!';\n      } catch (err) {\n        console.log('Oops, unable to copy');\n      }\n      document.body.removeChild(copyTextArea);\n    } else {\n      // Fallback if browser doesn't support .execCommand('copy')\n      window.prompt(\"Copy to clipboard: Ctrl+C or Command+C, Enter\", text);\n    }\n  }\n\n  //=======================================================//\n  return (\n    <Form.Group controlId=\"props.id\">\n      {\n        props.copyBtn?\n        (\n          <CompCopyBtn\n            text={props.value}\n          />\n        ):\n        null\n      }\n      \n      <Form.Label>{props.label}</Form.Label>\n      <Form.Control\n        readOnly={props.readOnly}\n        disabled={props.disabled}\n        name={props.name}\n        value={props.value}\n        as=\"textarea\" \n        rows=\"10\" \n      />\n    </Form.Group>\n    // <div className=\"KeyInput\">\n    //   <label htmlFor={props.id}>{props.label}</label>\n    //   <textarea rows={10} name={props.name} id={props.id} value={props.value} onChange={(s)=>{console.log(s)}}/>\n    // </div>\n  );\n}\n\nexport default CompKeyInput;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport '../App.scss';\nimport pgp from 'openpgp';\nimport QrReader from 'react-qr-reader';\n//=====================================//\n\nimport CompKeyInput from '../comp/CompKeyInput';\nimport { Jumbotron } from 'react-bootstrap';\n\nlet refPub, refPvt, refMsg\n\nconst TabMyKeys: React.FC = () => {\n  const [pubVal, setPubVal] = useState(\"\");\n  const [pvtVal, setPvtVal] = useState(\"\");\n  const [msgVal, setMsgVal] = useState(\"\");\n\n  const [alias, setAlias] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [passphrase, setPassphrase] = useState(\"\");\n  const [passconfirm, setPassconfirm] = useState(\"\");\n\n\n  const [keyThumb, setKeyThumb] = useState(<div></div>);\n\n  // const [showQRScan, setShowQRScan] = useState(true);\n  const [showQRScan, setShowQRScan] = useState(false);\n  const [qrCode, setQrCode] = useState(\"\");\n\n  return (\n    <div className=\"container\">\n      <Jumbotron>\n        <div>{`Under construction: See NEW_KEYS`}</div>\n      </Jumbotron>\n      {/* <header className=\"App-header\">\n      </header> */}\n      <CompKeyInput\n        label={\"public key\"}\n        name={\"public_key\"}\n        id={\"public_key\"}\n        value={pubVal}\n      />\n      <CompKeyInput\n        label={\"private key\"}\n        name={\"private_key\"}\n        id={\"private_key\"}\n        value={pvtVal}\n      />\n      <div>\n        <label htmlFor=\"alias\">Alias</label>\n        <input type=\"text\" name=\"alias\" id=\"alias\" onChange={(v)=>{setAlias(v.target.value)}}/>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"text\" name=\"email\" id=\"email\" onChange={(v)=>{setEmail(v.target.value)}}/>\n        <label htmlFor=\"passphrase\">Passphrase</label>\n        <input type=\"password\" name=\"passphrase\" id=\"passphrase\" onChange={(v)=>{setPassphrase(v.target.value)}}/>\n        <label htmlFor=\"passconfirm\">Confirm Passphrase</label>\n        <input type=\"password\" name=\"passconfirm\" id=\"passconfirm\" onChange={(v)=>{setPassconfirm(v.target.value)}}/>\n      </div>\n      <div>\n        <input type=\"button\" value=\"Generate\" onClick={()=>{\n          let errFlag=false;\n          let listOfErr:JSX.Element[]=[];\n          if (!alias) {\n            listOfErr.push(<p key={`err-alias`} style={{color:\"red\"}}>{`Missing Alias for key pair`}</p>)\n            errFlag=true;\n          }\n          if (!email) {\n            listOfErr.push(<p key={`err-email`} style={{color:\"red\"}}>{`Missing Email for key pair`}</p>)\n            errFlag=true;\n          }\n          if (!passphrase) {\n            listOfErr.push(<p key={`err-passphrase`} style={{color:\"red\"}}>{`Missing passphrase for key pair`}</p>)\n            errFlag=true;\n          }\n          if (passphrase!==passconfirm) {\n            listOfErr.push(<p key={`err-passconfirm`} style={{color:\"red\"}}>{`Confirm passphrase mismatch`}</p>)\n            errFlag=true;\n          }\n          if (!errFlag) {\n            setKeyThumb(<div>{`Generating pgp keypairs...`}</div>);\n            pgp.generateKey({\"curve\":\"curve25519\", \"userIds\":[{\"name\":alias, \"email\":email}], \"passphrase\":passphrase})\n              .then(k => {\n                setPubVal(k.publicKeyArmored);\n                setPvtVal(k.privateKeyArmored);\n  \n                let finger = k.key.getFingerprint();\n                console.log(`fingerprint: ${finger}`);\n                setKeyThumb(<div>{`fingerprint: ${finger}`}</div>);\n              })\n              .catch(e=>console.log(e))\n          }\n          else {\n            setKeyThumb(\n              <div>\n                {listOfErr}\n              </div>\n            )\n          }\n        }}/>\n      </div>\n      <div>{keyThumb}</div>\n\n      <div>\n        <CompKeyInput \n          name={`msg`}\n          id={`msg`}\n          label={`Message`}\n        />\n      </div>\n\n      <input type=\"button\" value=\"Toggle QR camera\"\n        onClick={()=>{\n          setShowQRScan(!showQRScan);\n        }}\n      />\n\n      {\n        showQRScan?\n        <div>\n          <div>{qrCode}</div>\n          <QrReader \n            onScan={(data)=>{console.log(data); if (data) setQrCode(data); }}\n            onError={(err)=>console.log(err)}\n            style={{width:400, height:400}}\n          />\n        </div>\n        :\n        null\n      }\n\n    </div>\n  );\n}\n\nexport default TabMyKeys;\n\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport '../App.scss';\nimport pgp from 'openpgp';\nimport CompKeyInput from '../comp/CompKeyInput';\n//==============react-bootstrap================//\nimport {\n  Form,\n  Container,\n  Row,\n  Col,\n  OverlayTrigger,\n  Tooltip,\n  Button,\n} from 'react-bootstrap';\n//==============IndexedDB======================//\nimport * as localforage from 'localforage';\nimport { KEY_MY_RPG_KEYS, TYPE_MY_RPG_KEYS } from '../model/TypeDefination';\n\nconst TabNewKey: React.FC = () => {\n  const [pubVal, setPubVal] = useState(\"\");\n  const [pvtVal, setPvtVal] = useState(\"\");\n\n  const [alias, setAlias] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [passphrase, setPassphrase] = useState(\"\");\n  const [passconfirm, setPassconfirm] = useState(\"\");\n\n  const [keyThumbDiv, setKeyThumbDiv] = useState(<div></div>);\n  const [keyThumb, setKeyThumb] = useState(\"\");\n\n  const generatePGP = async () => {\n    setKeyThumbDiv(<div>{`Generating pgp keypairs...`}</div>);\n    try {\n      let pgpGenKey = await pgp.generateKey({ \"curve\": \"curve25519\", \"userIds\": [{ \"name\": alias, \"email\": email }], \"passphrase\": passphrase })\n      setPubVal(pgpGenKey.publicKeyArmored);\n      setPvtVal(pgpGenKey.privateKeyArmored);\n      setKeyThumb(pgpGenKey.key.getFingerprint());\n      setKeyThumbDiv(<div>{`fingerprint: ${pgpGenKey.key.getFingerprint()}`}</div>);\n\n    } \n    catch (error) {\n      setKeyThumbDiv(<div>{`${error.toString()}`}</div>)\n    }\n\n  }\n  const savePGP = async () => {\n    try {\n      if (!!!pubVal||!!!pvtVal) return;\n      let myRpgKeys = await localforage.getItem<TYPE_MY_RPG_KEYS>(KEY_MY_RPG_KEYS);\n      \n      let resultRpgKeys = await localforage.setItem<TYPE_MY_RPG_KEYS>(\n        KEY_MY_RPG_KEYS, \n        {\n          ...(myRpgKeys||{}),\n          [keyThumb]: {\n            privateKey: pvtVal,\n            publicKey: pubVal,\n            email: email,\n            alias: alias,\n          }\n        }\n      )\n      console.log(resultRpgKeys);\n      //clear all after it's done\n      setAlias('');\n      setEmail('');\n      setPassphrase('');\n      setPassconfirm('');\n      setKeyThumb('');\n      setPubVal('');\n      setPvtVal('');\n      setKeyThumbDiv(<div></div>);\n    } \n    catch (error) {\n      setKeyThumbDiv(<div>{`${error.toString()}`}</div>)\n    }\n  }\n  //===============================================================================//\n  return (\n    <Container>\n\n      {/* Input data needed for key generation */}\n      <Form\n        onSubmit={(e: React.FormEvent) => {\n          e.preventDefault();\n          if (passconfirm === passphrase) {\n            generatePGP();\n          }\n        }}\n      >\n        {/* Input Identity */}\n        <Form.Row>\n          {/* Input Alias */}\n          <Col lg={6} sm={12} xs={12}>\n            <Form.Group>\n              <Form.Label>Alias</Form.Label>\n              <OverlayTrigger\n                key={'trigger-tooltip-alias'}\n                placement={'bottom'}\n                trigger={'focus'}\n                overlay={\n                  <Tooltip id={`newkey-tooltip-alias`}>\n                    <strong>Do not</strong> use real name or any identifiable nick-name for this application.\n                    Use a pseudonym or alias instead.\n                  </Tooltip>\n                }\n              >\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter Alias\"\n                  required\n                  onChange={(v: React.ChangeEvent<HTMLInputElement>) => { setAlias(v.target.value) }}\n                  value={alias}\n                />\n              </OverlayTrigger>\n            </Form.Group>\n          </Col>\n          {/* Input Email */}\n          <Col>\n            <Form.Group>\n              <Form.Label>Email</Form.Label>\n              <OverlayTrigger\n                key={'trigger-tooltip-email'}\n                placement={'bottom'}\n                trigger={'focus'}\n                overlay={\n                  <Tooltip id={`newkey-tooltip-email`}>\n                    <strong>Do not</strong> use your personal email address.\n                    In fact, it doesn't even have to be an actual address.\n                  </Tooltip>\n                }\n              >\n                <Form.Control\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  required\n                  onChange={(v: React.ChangeEvent<HTMLInputElement>) => { setEmail(v.target.value) }}\n                  value={email}\n                />\n              </OverlayTrigger>\n            </Form.Group>\n          </Col>\n        </Form.Row>\n        {/* Input Passphrase */}\n        <Form.Row>\n          {/* Input Passphrase */}\n          <Col lg={6} sm={12} xs={12}>\n            <Form.Group>\n              <Form.Label>Passphrase</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Enter Passphrase\"\n                required\n                onChange={(v: React.ChangeEvent<HTMLInputElement>) => { setPassphrase(v.target.value) }}\n                value={passphrase}\n              />\n            </Form.Group>\n          </Col>\n          {/* Confirm Passphrase */}\n          <Col>\n            <Form.Group>\n              <Form.Label>Confirm Passphrase</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Confirm Passphrase\"\n                required\n                isInvalid={passconfirm!==passphrase?true:undefined}\n                isValid={passconfirm===passphrase}\n                onChange={(v: React.ChangeEvent<HTMLInputElement>) => { setPassconfirm(v.target.value) }}\n                value={passconfirm}\n              />\n            </Form.Group>\n          </Col>\n        </Form.Row>\n        <Button type=\"submit\">{`Generate`}</Button>\n      </Form>\n\n      {/* Key pairs output (for manual ASCII armor) */}\n      <div>{keyThumbDiv}</div>\n      <Row>\n        <Col lg={6} sm={12} xs={12}>\n          <CompKeyInput\n            label={\"public key\"}\n            name={\"newkey_public_key\"}\n            id={\"newkey_public_key\"}\n            value={pubVal}\n            readOnly\n            copyBtn\n          />\n        </Col>\n        <Col>\n          <CompKeyInput\n            label={\"private key\"}\n            name={\"newkey_private_key\"}\n            id={\"newkey_private_key\"}\n            value={pvtVal}\n            readOnly\n            copyBtn\n          />\n        </Col>\n      </Row>\n      <Button \n        type=\"button\"\n        onClick={savePGP}\n        disabled={!!!pubVal||!!!pvtVal}\n      >\n        {`Save`}\n      </Button>\n    </Container>\n  );\n}\n\nexport default TabNewKey;\n\n","/**Long ASCII Armored string of PGP key */\nexport type KEY_ASC_STRING = string;\n\nexport type TYPE_MY_RPG_KEYS = {\n    [keyThumb:string]: {\n        privateKey: KEY_ASC_STRING,\n        publicKey: KEY_ASC_STRING,\n        alias?: string,\n        email?: string,\n    }\n}\n\nexport const KEY_MY_RPG_KEYS = \"KEY_MY_RPG_KEYS\";","import React, { useState } from 'react';\nimport './App.scss';\n//=============React Bootstrap==================//\nimport {Nav, Container, Navbar} from 'react-bootstrap';\nimport NavLink from 'react-bootstrap/NavLink';\n//==============React Redux=========//\nimport {connect} from 'react-redux';\nimport { INIT_STATE_TYPE } from './redux/initState';\nimport { actcreate_tab_setTab } from './redux/reduce_tab';\n//============== Tab ============//\nimport TabMyKeys from './tab/TabMyKeys';\nimport TabNewKey from './tab/TabNewKey';\n\nconst GITTHUB_PAGE = `https://github.com/arealhumannotrobot/rpg-poc`;\nconst VERSION = [0,1,0];\n\ntype AppProps = {\n  reduxState:INIT_STATE_TYPE,\n  actcreate_tab_setTab: typeof actcreate_tab_setTab,\n}\nconst App: React.FC<AppProps> = (props) => {\n\n  type RpgTabContentProps = {\n    reduxState:INIT_STATE_TYPE,\n  }\n  const RpgTabContent:React.FC<RpgTabContentProps> = (props) => {\n    let Tab:typeof TabMyKeys = (childprops)=>(\n      <div>\n        {props.reduxState.tab}\n        <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"inputGroupFileAddon01\">\n              Upload\n            </span>\n          </div>\n          <div className=\"custom-file\">\n            <input\n              //https://usefulangle.com/post/193/javascript-read-local-file\n              type=\"file\"\n              className=\"custom-file-input\"\n              id=\"inputGroupFile01\"\n              aria-describedby=\"inputGroupFileAddon01\"\n              accept=\"text/plain\"\n              onChange={(e)=>{\n                console.log(e.target.files);\n                let reader = new FileReader();\n                reader.addEventListener('load', (e)=>{\n                  if (e.target)\n                    console.log(e.target.result);\n                })\n                if (e.target.files && e.target.files.length){\n                  reader.readAsText(e.target.files[0]);\n                }\n              }}\n            />\n            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\n              Choose file\n            </label>\n          </div>\n        </div>\n      </div>\n    );\n    if (props.reduxState.tab === \"MY_KEYS\"){\n      Tab = TabMyKeys;\n    }\n    else if (props.reduxState.tab === \"NEW_KEYS\"){\n      Tab = TabNewKey;\n    }\n    else if (props.reduxState.tab === \"KEY_SIGNING\"){\n      \n    }\n    else if (props.reduxState.tab === \"EXCH_KEY_RING\"){\n      \n    }\n    else if (props.reduxState.tab === \"VERF_STRANGER\"){\n      \n    }\n    else if (props.reduxState.tab === \"MSG_CRYPT\"){\n      \n    }\n\n    return ( <Tab /> )\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Navbar\n          fixed=\"top\"\n          variant=\"dark\"\n          bg=\"dark\"\n          expand=\"lg\"\n        >\n          <Navbar.Brand>{`RPG-POC`} <sub>{`v${VERSION[0]}.${VERSION[1]}.${VERSION[2]}`}</sub> </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\" >\n            <Nav \n              className=\"mr-auto\"\n              variant=\"pills\"\n              activeKey={props.reduxState.tab} \n              onSelect={ (k:any) => {console.log(`selected ${k}`); props.actcreate_tab_setTab(k)}}\n            >\n              <Nav.Item>\n                <NavLink eventKey=\"MY_KEYS\">MY_KEYS</NavLink>\n              </Nav.Item>\n              <Nav.Item>\n                <NavLink eventKey=\"NEW_KEYS\">NEW_KEYS</NavLink>\n              </Nav.Item>\n              <Nav.Item>\n                <NavLink eventKey=\"KEY_SIGNING\">KEY_SIGNING</NavLink>\n              </Nav.Item>\n              <Nav.Item>\n                <NavLink eventKey=\"EXCH_KEY_RING\">EXCH_KEY_RING</NavLink>\n              </Nav.Item>\n              <Nav.Item>\n                <NavLink eventKey=\"VERF_STRANGER\">VERF_STRANGER</NavLink>\n              </Nav.Item>\n              <Nav.Item>\n                <NavLink eventKey=\"MSG_CRYPT\">MSG_CRYPT</NavLink>\n              </Nav.Item>\n            </Nav>\n          </Navbar.Collapse>\n          <a href={GITTHUB_PAGE} target=\"_blank\" rel=\"noopener noreferrer\">\n            <div className=\"mr-sm-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" fill=\"#ccc\"/>\n              </svg>\n            </div>\n          </a>\n        </Navbar>\n        <RpgTabContent\n          reduxState={props.reduxState}\n        />\n      </Container>\n\n    </div>\n  );\n}\n\nconst mapStateToProps = (state:INIT_STATE_TYPE) => ({ reduxState: state });\nconst mapDispatchToProps = {\n  actcreate_tab_setTab\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { reduce_tab } from \"./reduce_tab\";\n\n\nexport const rootReducer = combineReducers({\n    tab:reduce_tab,\n})","import {createStore, applyMiddleware} from \"redux\";\nimport { rootReducer } from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://create-react-app.dev/docs/making-a-progressive-web-app/\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}